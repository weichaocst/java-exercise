server.port = 8082
## 数据源配置
spring.datasource.url = jdbc:mysql://localhost:3306/sms?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.datasource.username = root
spring.datasource.password = 123456
spring.datasource.driverClassName = com.mysql.jdbc.Driver
# 初始化大小，最小，最大
spring.datasource.initialSize = 5
spring.datasource.minIdle = 5
spring.datasource.maxActive = 20
# 配置获取连接等待超时的时间
spring.datasource.maxWait = 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis = 300000
spring.datasource.validationQuery = SELECT 1 FROM DUAL
spring.datasource.testWhileIdle = true
spring.datasource.testOnBorrow = false
spring.datasource.testOnReturn = false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements = true
spring.datasource.maxPoolPreparedStatementPerConnectionSize = 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters = stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties = druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true
#mybatis配置
mybatis.config-location = classpath:mybatis-config.xml
## Redis 配置
## Redis数据库索引（默认为0）
redis.database = 0
## Redis服务器地址
redis.host = 127.0.0.1
## Redis服务器连接端口
redis.port = 6379
## Redis服务器连接密码（默认为空）
redis.password =
## 连接池最大连接数（使用负值表示没有限制）
redis.pool.max-active = 1024
## 连接池最大阻塞等待时间（使用负值表示没有限制）
redis.pool.max-wait = -1
## 连接池中的最大空闲连接
redis.pool.max-idle = 8
## 连接池中的最小空闲连接
redis.pool.min-idle = 0
##检测池里连接的可用性
redis.testOnBorrow = false
## 连接超时时间（毫秒）
redis.timeout = 0

